//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Omega {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ContainerDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ContainerDataSet : global::System.Data.DataSet {
        
        private ContainerDataTable tableContainer;
        
        private ContainerTypeDataTable tableContainerType;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ContainerDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ContainerDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Container"] != null)) {
                    base.Tables.Add(new ContainerDataTable(ds.Tables["Container"]));
                }
                if ((ds.Tables["ContainerType"] != null)) {
                    base.Tables.Add(new ContainerTypeDataTable(ds.Tables["ContainerType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContainerDataTable Container {
            get {
                return this.tableContainer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContainerTypeDataTable ContainerType {
            get {
                return this.tableContainerType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ContainerDataSet cln = ((ContainerDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Container"] != null)) {
                    base.Tables.Add(new ContainerDataTable(ds.Tables["Container"]));
                }
                if ((ds.Tables["ContainerType"] != null)) {
                    base.Tables.Add(new ContainerTypeDataTable(ds.Tables["ContainerType"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableContainer = ((ContainerDataTable)(base.Tables["Container"]));
            if ((initTable == true)) {
                if ((this.tableContainer != null)) {
                    this.tableContainer.InitVars();
                }
            }
            this.tableContainerType = ((ContainerTypeDataTable)(base.Tables["ContainerType"]));
            if ((initTable == true)) {
                if ((this.tableContainerType != null)) {
                    this.tableContainerType.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ContainerDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ContainerDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableContainer = new ContainerDataTable();
            base.Tables.Add(this.tableContainer);
            this.tableContainerType = new ContainerTypeDataTable();
            base.Tables.Add(this.tableContainerType);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContainer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContainerType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ContainerDataSet ds = new ContainerDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ContainerRowChangeEventHandler(object sender, ContainerRowChangeEvent e);
        
        public delegate void ContainerTypeRowChangeEventHandler(object sender, ContainerTypeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContainerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnContainerId;
            
            private global::System.Data.DataColumn columnContainerName;
            
            private global::System.Data.DataColumn columnContainerNumber;
            
            private global::System.Data.DataColumn columnContainerType;
            
            private global::System.Data.DataColumn columnLiquidName;
            
            private global::System.Data.DataColumn columnMaxHeight;
            
            private global::System.Data.DataColumn columnMinHeight;
            
            private global::System.Data.DataColumn columnIsCapacityGrow;
            
            private global::System.Data.DataColumn columnCapacityDelivered;
            
            private global::System.Data.DataColumn columnCapacityDeliveredDate;
            
            private global::System.Data.DataColumn columneToMeasure;
            
            private global::System.Data.DataColumn columnCurrentHeight;
            
            private global::System.Data.DataColumn columnCurrentCapacity;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerDataTable() {
                this.TableName = "Container";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContainerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerIdColumn {
                get {
                    return this.columnContainerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerNameColumn {
                get {
                    return this.columnContainerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerNumberColumn {
                get {
                    return this.columnContainerNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerTypeColumn {
                get {
                    return this.columnContainerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiquidNameColumn {
                get {
                    return this.columnLiquidName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxHeightColumn {
                get {
                    return this.columnMaxHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinHeightColumn {
                get {
                    return this.columnMinHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCapacityGrowColumn {
                get {
                    return this.columnIsCapacityGrow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityDeliveredColumn {
                get {
                    return this.columnCapacityDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityDeliveredDateColumn {
                get {
                    return this.columnCapacityDeliveredDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn eToMeasureColumn {
                get {
                    return this.columneToMeasure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentHeightColumn {
                get {
                    return this.columnCurrentHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentCapacityColumn {
                get {
                    return this.columnCurrentCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRow this[int index] {
                get {
                    return ((ContainerRow)(this.Rows[index]));
                }
            }
            
            public event ContainerRowChangeEventHandler ContainerRowChanging;
            
            public event ContainerRowChangeEventHandler ContainerRowChanged;
            
            public event ContainerRowChangeEventHandler ContainerRowDeleting;
            
            public event ContainerRowChangeEventHandler ContainerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContainerRow(ContainerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRow AddContainerRow(string ContainerName, int ContainerNumber, long ContainerType, string LiquidName, int MaxHeight, int MinHeight, bool IsCapacityGrow, int CapacityDelivered, System.DateTime CapacityDeliveredDate, bool eToMeasure, int CurrentHeight, int CurrentCapacity, bool IsDeleted) {
                ContainerRow rowContainerRow = ((ContainerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ContainerName,
                        ContainerNumber,
                        ContainerType,
                        LiquidName,
                        MaxHeight,
                        MinHeight,
                        IsCapacityGrow,
                        CapacityDelivered,
                        CapacityDeliveredDate,
                        eToMeasure,
                        CurrentHeight,
                        CurrentCapacity,
                        IsDeleted};
                rowContainerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContainerRow);
                return rowContainerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRow FindByContainerId(long ContainerId) {
                return ((ContainerRow)(this.Rows.Find(new object[] {
                            ContainerId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContainerDataTable cln = ((ContainerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContainerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContainerId = base.Columns["ContainerId"];
                this.columnContainerName = base.Columns["ContainerName"];
                this.columnContainerNumber = base.Columns["ContainerNumber"];
                this.columnContainerType = base.Columns["ContainerType"];
                this.columnLiquidName = base.Columns["LiquidName"];
                this.columnMaxHeight = base.Columns["MaxHeight"];
                this.columnMinHeight = base.Columns["MinHeight"];
                this.columnIsCapacityGrow = base.Columns["IsCapacityGrow"];
                this.columnCapacityDelivered = base.Columns["CapacityDelivered"];
                this.columnCapacityDeliveredDate = base.Columns["CapacityDeliveredDate"];
                this.columneToMeasure = base.Columns["eToMeasure"];
                this.columnCurrentHeight = base.Columns["CurrentHeight"];
                this.columnCurrentCapacity = base.Columns["CurrentCapacity"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContainerId = new global::System.Data.DataColumn("ContainerId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerId);
                this.columnContainerName = new global::System.Data.DataColumn("ContainerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerName);
                this.columnContainerNumber = new global::System.Data.DataColumn("ContainerNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerNumber);
                this.columnContainerType = new global::System.Data.DataColumn("ContainerType", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerType);
                this.columnLiquidName = new global::System.Data.DataColumn("LiquidName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiquidName);
                this.columnMaxHeight = new global::System.Data.DataColumn("MaxHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxHeight);
                this.columnMinHeight = new global::System.Data.DataColumn("MinHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinHeight);
                this.columnIsCapacityGrow = new global::System.Data.DataColumn("IsCapacityGrow", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCapacityGrow);
                this.columnCapacityDelivered = new global::System.Data.DataColumn("CapacityDelivered", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacityDelivered);
                this.columnCapacityDeliveredDate = new global::System.Data.DataColumn("CapacityDeliveredDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacityDeliveredDate);
                this.columneToMeasure = new global::System.Data.DataColumn("eToMeasure", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columneToMeasure);
                this.columnCurrentHeight = new global::System.Data.DataColumn("CurrentHeight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentHeight);
                this.columnCurrentCapacity = new global::System.Data.DataColumn("CurrentCapacity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentCapacity);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnContainerId}, true));
                this.columnContainerId.AutoIncrement = true;
                this.columnContainerId.AllowDBNull = false;
                this.columnContainerId.Unique = true;
                this.columnContainerName.DefaultValue = ((string)(""));
                this.columnContainerName.MaxLength = 255;
                this.columnContainerNumber.DefaultValue = ((int)(0));
                this.columnLiquidName.DefaultValue = ((string)(""));
                this.columnLiquidName.MaxLength = 255;
                this.columnMaxHeight.DefaultValue = ((int)(0));
                this.columnMinHeight.DefaultValue = ((int)(0));
                this.columnIsCapacityGrow.DefaultValue = ((bool)(false));
                this.columnCapacityDelivered.DefaultValue = ((int)(0));
                this.columneToMeasure.DefaultValue = ((bool)(false));
                this.columnCurrentHeight.DefaultValue = ((int)(0));
                this.columnCurrentCapacity.DefaultValue = ((int)(0));
                this.columnIsDeleted.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRow NewContainerRow() {
                return ((ContainerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContainerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContainerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContainerRowChanged != null)) {
                    this.ContainerRowChanged(this, new ContainerRowChangeEvent(((ContainerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContainerRowChanging != null)) {
                    this.ContainerRowChanging(this, new ContainerRowChangeEvent(((ContainerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContainerRowDeleted != null)) {
                    this.ContainerRowDeleted(this, new ContainerRowChangeEvent(((ContainerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContainerRowDeleting != null)) {
                    this.ContainerRowDeleting(this, new ContainerRowChangeEvent(((ContainerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContainerRow(ContainerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ContainerDataSet ds = new ContainerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContainerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContainerTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnContainerTypeId;
            
            private global::System.Data.DataColumn columnContainerTypeName;
            
            private global::System.Data.DataColumn columnContainerKind;
            
            private global::System.Data.DataColumn columnCapacity;
            
            private global::System.Data.DataColumn columnHeight;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnLength;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeDataTable() {
                this.TableName = "ContainerType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContainerTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerTypeIdColumn {
                get {
                    return this.columnContainerTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerTypeNameColumn {
                get {
                    return this.columnContainerTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerKindColumn {
                get {
                    return this.columnContainerKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CapacityColumn {
                get {
                    return this.columnCapacity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRow this[int index] {
                get {
                    return ((ContainerTypeRow)(this.Rows[index]));
                }
            }
            
            public event ContainerTypeRowChangeEventHandler ContainerTypeRowChanging;
            
            public event ContainerTypeRowChangeEventHandler ContainerTypeRowChanged;
            
            public event ContainerTypeRowChangeEventHandler ContainerTypeRowDeleting;
            
            public event ContainerTypeRowChangeEventHandler ContainerTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContainerTypeRow(ContainerTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRow AddContainerTypeRow(string ContainerTypeName, long ContainerKind, int Capacity, int Height, int Width, int Length) {
                ContainerTypeRow rowContainerTypeRow = ((ContainerTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ContainerTypeName,
                        ContainerKind,
                        Capacity,
                        Height,
                        Width,
                        Length};
                rowContainerTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContainerTypeRow);
                return rowContainerTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRow FindByContainerTypeId(long ContainerTypeId) {
                return ((ContainerTypeRow)(this.Rows.Find(new object[] {
                            ContainerTypeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContainerTypeDataTable cln = ((ContainerTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContainerTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContainerTypeId = base.Columns["ContainerTypeId"];
                this.columnContainerTypeName = base.Columns["ContainerTypeName"];
                this.columnContainerKind = base.Columns["ContainerKind"];
                this.columnCapacity = base.Columns["Capacity"];
                this.columnHeight = base.Columns["Height"];
                this.columnWidth = base.Columns["Width"];
                this.columnLength = base.Columns["Length"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContainerTypeId = new global::System.Data.DataColumn("ContainerTypeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerTypeId);
                this.columnContainerTypeName = new global::System.Data.DataColumn("ContainerTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerTypeName);
                this.columnContainerKind = new global::System.Data.DataColumn("ContainerKind", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerKind);
                this.columnCapacity = new global::System.Data.DataColumn("Capacity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacity);
                this.columnHeight = new global::System.Data.DataColumn("Height", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeight);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnContainerTypeId}, true));
                this.columnContainerTypeId.AutoIncrement = true;
                this.columnContainerTypeId.AutoIncrementSeed = -1;
                this.columnContainerTypeId.AutoIncrementStep = -1;
                this.columnContainerTypeId.AllowDBNull = false;
                this.columnContainerTypeId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRow NewContainerTypeRow() {
                return ((ContainerTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContainerTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContainerTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContainerTypeRowChanged != null)) {
                    this.ContainerTypeRowChanged(this, new ContainerTypeRowChangeEvent(((ContainerTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContainerTypeRowChanging != null)) {
                    this.ContainerTypeRowChanging(this, new ContainerTypeRowChangeEvent(((ContainerTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContainerTypeRowDeleted != null)) {
                    this.ContainerTypeRowDeleted(this, new ContainerTypeRowChangeEvent(((ContainerTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContainerTypeRowDeleting != null)) {
                    this.ContainerTypeRowDeleting(this, new ContainerTypeRowChangeEvent(((ContainerTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContainerTypeRow(ContainerTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ContainerDataSet ds = new ContainerDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContainerTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContainerRow : global::System.Data.DataRow {
            
            private ContainerDataTable tableContainer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContainer = ((ContainerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ContainerId {
                get {
                    return ((long)(this[this.tableContainer.ContainerIdColumn]));
                }
                set {
                    this[this.tableContainer.ContainerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerName {
                get {
                    try {
                        return ((string)(this[this.tableContainer.ContainerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerName\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.ContainerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContainerNumber {
                get {
                    try {
                        return ((int)(this[this.tableContainer.ContainerNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerNumber\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.ContainerNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ContainerType {
                get {
                    try {
                        return ((long)(this[this.tableContainer.ContainerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerType\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.ContainerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LiquidName {
                get {
                    try {
                        return ((string)(this[this.tableContainer.LiquidNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiquidName\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.LiquidNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxHeight {
                get {
                    try {
                        return ((int)(this[this.tableContainer.MaxHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxHeight\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.MaxHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinHeight {
                get {
                    try {
                        return ((int)(this[this.tableContainer.MinHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinHeight\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.MinHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityGrow {
                get {
                    try {
                        return ((bool)(this[this.tableContainer.IsCapacityGrowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCapacityGrow\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.IsCapacityGrowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CapacityDelivered {
                get {
                    try {
                        return ((int)(this[this.tableContainer.CapacityDeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CapacityDelivered\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.CapacityDeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CapacityDeliveredDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableContainer.CapacityDeliveredDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CapacityDeliveredDate\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.CapacityDeliveredDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool eToMeasure {
                get {
                    try {
                        return ((bool)(this[this.tableContainer.eToMeasureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'eToMeasure\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.eToMeasureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrentHeight {
                get {
                    try {
                        return ((int)(this[this.tableContainer.CurrentHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentHeight\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.CurrentHeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrentCapacity {
                get {
                    try {
                        return ((int)(this[this.tableContainer.CurrentCapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentCapacity\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.CurrentCapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableContainer.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'Container\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainer.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerNameNull() {
                return this.IsNull(this.tableContainer.ContainerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerNameNull() {
                this[this.tableContainer.ContainerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerNumberNull() {
                return this.IsNull(this.tableContainer.ContainerNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerNumberNull() {
                this[this.tableContainer.ContainerNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerTypeNull() {
                return this.IsNull(this.tableContainer.ContainerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerTypeNull() {
                this[this.tableContainer.ContainerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiquidNameNull() {
                return this.IsNull(this.tableContainer.LiquidNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiquidNameNull() {
                this[this.tableContainer.LiquidNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxHeightNull() {
                return this.IsNull(this.tableContainer.MaxHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxHeightNull() {
                this[this.tableContainer.MaxHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinHeightNull() {
                return this.IsNull(this.tableContainer.MinHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinHeightNull() {
                this[this.tableContainer.MinHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCapacityGrowNull() {
                return this.IsNull(this.tableContainer.IsCapacityGrowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCapacityGrowNull() {
                this[this.tableContainer.IsCapacityGrowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityDeliveredNull() {
                return this.IsNull(this.tableContainer.CapacityDeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityDeliveredNull() {
                this[this.tableContainer.CapacityDeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityDeliveredDateNull() {
                return this.IsNull(this.tableContainer.CapacityDeliveredDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityDeliveredDateNull() {
                this[this.tableContainer.CapacityDeliveredDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseToMeasureNull() {
                return this.IsNull(this.tableContainer.eToMeasureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteToMeasureNull() {
                this[this.tableContainer.eToMeasureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentHeightNull() {
                return this.IsNull(this.tableContainer.CurrentHeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentHeightNull() {
                this[this.tableContainer.CurrentHeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentCapacityNull() {
                return this.IsNull(this.tableContainer.CurrentCapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentCapacityNull() {
                this[this.tableContainer.CurrentCapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableContainer.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tableContainer.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContainerTypeRow : global::System.Data.DataRow {
            
            private ContainerTypeDataTable tableContainerType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContainerType = ((ContainerTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ContainerTypeId {
                get {
                    return ((long)(this[this.tableContainerType.ContainerTypeIdColumn]));
                }
                set {
                    this[this.tableContainerType.ContainerTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerTypeName {
                get {
                    try {
                        return ((string)(this[this.tableContainerType.ContainerTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerTypeName\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.ContainerTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ContainerKind {
                get {
                    try {
                        return ((long)(this[this.tableContainerType.ContainerKindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerKind\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.ContainerKindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Capacity {
                get {
                    try {
                        return ((int)(this[this.tableContainerType.CapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capacity\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.CapacityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableContainerType.HeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Height\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.HeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tableContainerType.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Length {
                get {
                    try {
                        return ((int)(this[this.tableContainerType.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'ContainerType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContainerType.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerTypeNameNull() {
                return this.IsNull(this.tableContainerType.ContainerTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerTypeNameNull() {
                this[this.tableContainerType.ContainerTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerKindNull() {
                return this.IsNull(this.tableContainerType.ContainerKindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerKindNull() {
                this[this.tableContainerType.ContainerKindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacityNull() {
                return this.IsNull(this.tableContainerType.CapacityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacityNull() {
                this[this.tableContainerType.CapacityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNull() {
                return this.IsNull(this.tableContainerType.HeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNull() {
                this[this.tableContainerType.HeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableContainerType.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableContainerType.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableContainerType.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableContainerType.LengthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContainerRowChangeEvent : global::System.EventArgs {
            
            private ContainerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRowChangeEvent(ContainerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContainerTypeRowChangeEvent : global::System.EventArgs {
            
            private ContainerTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRowChangeEvent(ContainerTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591